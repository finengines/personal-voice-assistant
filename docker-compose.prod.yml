# Production Docker Compose for Dokploy Deployment
# This file contains production-specific configurations optimized for container deployment
# All host port exposures are removed - external access is handled by Dokploy
# LiveKit is deployed separately (use LiveKit Cloud or external instance)

services:
  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:15-alpine
    container_name: personal_agent_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-personal_agent}
      POSTGRES_USER: ${POSTGRES_USER:-postgres} 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_v2:/var/lib/postgresql/data
      - ./backend/core/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - internal
      - assistant-network

  # Personal Agent Backend with Authentication - Production Configuration
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: personal_agent_backend
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-personal_agent}
      
      # AI Service API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - CARTESIA_API_KEY=${CARTESIA_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - API_KEY_ENCRYPTION_KEY=${API_KEY_ENCRYPTION_KEY}
      
      # LiveKit Configuration
      - LIVEKIT_URL=wss://assistant-u8y3p8sx.livekit.cloud
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      
      # API Ports
      - MCP_API_PORT=${MCP_API_PORT:-8082}
      - PRESET_API_PORT=${PRESET_API_PORT:-8083}
      - GLOBAL_SETTINGS_API_PORT=${GLOBAL_SETTINGS_API_PORT:-8084}
      - AUTH_API_PORT=${AUTH_API_PORT:-8001}
      
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      
      # Timezone Configuration
      - TZ=${TZ:-Europe/London}
      
      # Admin Account Credentials (configure via environment variables)
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_NAME=${ADMIN_NAME}
      
      # Memory and Knowledge Services (Optional)
      - GRAPHITI_MCP_URL=${GRAPHITI_MCP_URL:-https://your-graphiti-instance.com/sse}
      - GRAPHITI_API_URL=${GRAPHITI_API_URL:-https://your-graphiti-instance.com}
      
      # Environment
      - ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "(curl -f http://localhost:8001/auth/health || curl -f http://localhost:8085/auth/health) && curl -f http://localhost:8082/health && curl -f http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - internal
      - assistant-network

  # Token Server - Production Configuration
  token-server:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: personal_agent_token_server
    command: ["python", "utils/simple_token_server.py"]
    environment:
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - LIVEKIT_URL=wss://assistant-u8y3p8sx.livekit.cloud
      - TOKEN_SERVER_PORT=8081
      - TOKEN_SERVER_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - internal
      - assistant-network

  # Personal Agent Frontend - Production Configuration
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: personal_agent_frontend
    # No ports exposed - Dokploy will route to internal port 80
    depends_on:
      backend:
        condition: service_healthy
      token-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - internal
      - assistant-network

# Production volumes with proper configuration
volumes:
  postgres_data_v2:

# Internal network for service communication
networks:
  internal:
    driver: bridge
    internal: false  # Allow external communication for API access 
  assistant-network:
    external: true 